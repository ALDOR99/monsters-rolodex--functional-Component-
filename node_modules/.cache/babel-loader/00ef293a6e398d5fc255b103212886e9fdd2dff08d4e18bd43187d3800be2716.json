{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali_d\\\\OneDrive\\\\Belgeler\\\\GitHub\\\\monsters-rolodex--functional-Component-\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n//\"useState\" Yerel durumu işlevsel bir bileşen içinde kapsülleme yeteneği verir\n\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\n//--------------------------------------------------------------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [searchField, setSearchField] = useState(\"\"); //İki değerden oluşan bir dizi verir.\n  console.log(searchField);\n  // [value, setValue]\n  //Temelde yaptığı şey,değişkenleri bir dizinin içindeki değerlere atamamıza izin vermektir.\n\n  // const arr = [2, 4];\n  // const [a, b] = arr;\n  // console.log(a); \"2\"\n  // console.log(b); \"4\"\n\n  //Yani burada yaptığımız şey tam olarak bu, durumumuz bize iki değerden oluşan bir dizi verir\n\n  //--------------------------------------------------------------------\n\n  const [monsters, setMonsters] = useState([]);\n  // önce değer sonra değer kümesi\n\n  const [stringFieled, setStringField] = useState(\"\");\n  console.log(\"render\");\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\") //Jsonu alıyorum ,[ fetch = gidip getirmek ]\n    .then(response => response.json()).then(users => setMonsters(users));\n  }, []);\n\n  //--------------------------------------------------------------------\n\n  const onSearchChange = event => {\n    const searchFieldString = event.target.value.toLowerCase();\n    setSearchField(searchFieldString);\n  };\n\n  //--------------------------------------------------------------------\n\n  const filteredMonsters = monsters.filter(monster => {\n    return monster.name.toLowerCase().includes(searchField);\n  });\n\n  //--------------------------------------------------------------------\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      className: \"search-box\",\n      onChangeHandler: onSearchChange,\n      placeholder: \"search monsters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      monsters: filteredMonsters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n// class App extends Component {\n//   // bu bir sınıf bileşenidir.\n//   //------------------------------------------------------------------------------------------------------------------\n\n//   constructor() {\n//     // app.js çalıştırıldığında ilk olarak bu method başlatılır,ardından render\n//     //inşaatçi // yapıcı metod\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: \"\", //Bu arama alanı metni değişiklik üzerine.\n//     };\n//   }\n\n//   //------------------------------------------------------------------------------------------------------------------\n\n//   componentDidMount() {\n//     //[yaşam döngüsü yöntemi  = lifecycle method]\n\n//     fetch(\"https://jsonplaceholder.typicode.com/users\") //Jsonu alıyorum ,[ fetch = gidip getirmek ]\n//       .then((response) => response.json())\n//       .then((users) =>\n//         this.setState(() => {\n//           //setState her çağrıldığında ,render tekrar çağrılır\n//           return { monsters: users };\n//         })\n//       );\n//   }\n\n//   //------------------------------------------------------------------------------------------------------------------\n\n//   onSearchChange = (event) => {\n//     // yaptığım diğer optimizasyon ise , render çağrısı yapıldığında gereksiz yere fazladan anonim fonksiyonlar oluşturmayarak uygulamayı biraz daha performanslı hale getirdim\n//     // sınıf bileşenenmiz başlatıldığında yalnızca bir kez çağrılacak ve başlatılacak olan yönteme taşıdım.\n//     const searchField = event.target.value.toLowerCase(); //toLowerCase ,tüm diziler üzerinde ,hepsini küçük harfe dönüştüren bir yöntemdir.\n\n//     this.setState(() => {\n//       return {\n//         searchField,\n//       };\n//     });\n//   };\n\n//   //------------------------------------------------------------------------------------------------------------------\n\n//   render() {\n//     // Render ne gösterileceğini belirler. Kullanıcının arayüzünün ne olacağını belirler.\n//     console.log(\"render from appJs\");\n//     //------------------------------------------------------------\n//     const { monsters, searchField } = this.state; // iki büyük optimizasyon yaptım\n//     const { onSearchChange } = this;\n//     //------------------------------------------------------------\n\n//     const filteredMonsters = monsters.filter((monster) => {\n//       // Canavarlarımızı arama alanından filtreliyoruz\n//       return monster.name.toLowerCase().includes(searchField);\n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <h1 className=\"app-title\">Monsters Rolodex</h1>\n//         <SearchBox\n//           className=\"search-box\"\n//           onChangeHandler={onSearchChange}\n//           placeholder={\"search monsters\"}\n//         />\n//         <CardList monsters={filteredMonsters} />\n\n//         <button onClick></button>\n//       </div>\n//     );\n//   }\n// }\n\n//--------------------------------------------------------------------\n_s(App, \"fRGm3ko9UcIypZITBKumaBf4xcc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","CardList","SearchBox","App","searchField","setSearchField","console","log","monsters","setMonsters","stringFieled","setStringField","fetch","then","response","json","users","onSearchChange","event","searchFieldString","target","value","toLowerCase","filteredMonsters","filter","monster","name","includes"],"sources":["C:/Users/ali_d/OneDrive/Belgeler/GitHub/monsters-rolodex--functional-Component-/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n//\"useState\" Yerel durumu işlevsel bir bileşen içinde kapsülleme yeteneği verir\r\n\r\nimport CardList from \"./components/card-list/card-list.component\";\r\n\r\nimport SearchBox from \"./components/search-box/search-box.component\";\r\n\r\nimport \"./App.css\";\r\n\r\n//--------------------------------------------------------------------\r\n\r\nconst App = () => {\r\n  const [searchField, setSearchField] = useState(\"\"); //İki değerden oluşan bir dizi verir.\r\n  console.log(searchField);\r\n  // [value, setValue]\r\n  //Temelde yaptığı şey,değişkenleri bir dizinin içindeki değerlere atamamıza izin vermektir.\r\n\r\n  // const arr = [2, 4];\r\n  // const [a, b] = arr;\r\n  // console.log(a); \"2\"\r\n  // console.log(b); \"4\"\r\n\r\n  //Yani burada yaptığımız şey tam olarak bu, durumumuz bize iki değerden oluşan bir dizi verir\r\n\r\n  //--------------------------------------------------------------------\r\n\r\n  const [monsters, setMonsters] = useState([]);\r\n  // önce değer sonra değer kümesi\r\n\r\n  const [stringFieled, setStringField] = useState(\"\");\r\n\r\n  console.log(\"render\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\") //Jsonu alıyorum ,[ fetch = gidip getirmek ]\r\n      .then((response) => response.json())\r\n      .then((users) => setMonsters(users));\r\n  }, []);\r\n\r\n  //--------------------------------------------------------------------\r\n\r\n  const onSearchChange = (event) => {\r\n    const searchFieldString = event.target.value.toLowerCase();\r\n\r\n    setSearchField(searchFieldString);\r\n  };\r\n\r\n  //--------------------------------------------------------------------\r\n\r\n  const filteredMonsters = monsters.filter((monster) => {\r\n    return monster.name.toLowerCase().includes(searchField);\r\n  });\r\n\r\n  //--------------------------------------------------------------------\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"app-title\">Monsters Rolodex</h1>\r\n\r\n      <SearchBox\r\n        className=\"search-box\"\r\n        onChangeHandler={onSearchChange}\r\n        placeholder={\"search monsters\"}\r\n      />\r\n\r\n      <CardList monsters={filteredMonsters} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// class App extends Component {\r\n//   // bu bir sınıf bileşenidir.\r\n//   //------------------------------------------------------------------------------------------------------------------\r\n\r\n//   constructor() {\r\n//     // app.js çalıştırıldığında ilk olarak bu method başlatılır,ardından render\r\n//     //inşaatçi // yapıcı metod\r\n//     super();\r\n//     this.state = {\r\n//       monsters: [],\r\n//       searchField: \"\", //Bu arama alanı metni değişiklik üzerine.\r\n//     };\r\n//   }\r\n\r\n//   //------------------------------------------------------------------------------------------------------------------\r\n\r\n//   componentDidMount() {\r\n//     //[yaşam döngüsü yöntemi  = lifecycle method]\r\n\r\n//     fetch(\"https://jsonplaceholder.typicode.com/users\") //Jsonu alıyorum ,[ fetch = gidip getirmek ]\r\n//       .then((response) => response.json())\r\n//       .then((users) =>\r\n//         this.setState(() => {\r\n//           //setState her çağrıldığında ,render tekrar çağrılır\r\n//           return { monsters: users };\r\n//         })\r\n//       );\r\n//   }\r\n\r\n//   //------------------------------------------------------------------------------------------------------------------\r\n\r\n//   onSearchChange = (event) => {\r\n//     // yaptığım diğer optimizasyon ise , render çağrısı yapıldığında gereksiz yere fazladan anonim fonksiyonlar oluşturmayarak uygulamayı biraz daha performanslı hale getirdim\r\n//     // sınıf bileşenenmiz başlatıldığında yalnızca bir kez çağrılacak ve başlatılacak olan yönteme taşıdım.\r\n//     const searchField = event.target.value.toLowerCase(); //toLowerCase ,tüm diziler üzerinde ,hepsini küçük harfe dönüştüren bir yöntemdir.\r\n\r\n//     this.setState(() => {\r\n//       return {\r\n//         searchField,\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   //------------------------------------------------------------------------------------------------------------------\r\n\r\n//   render() {\r\n//     // Render ne gösterileceğini belirler. Kullanıcının arayüzünün ne olacağını belirler.\r\n//     console.log(\"render from appJs\");\r\n//     //------------------------------------------------------------\r\n//     const { monsters, searchField } = this.state; // iki büyük optimizasyon yaptım\r\n//     const { onSearchChange } = this;\r\n//     //------------------------------------------------------------\r\n\r\n//     const filteredMonsters = monsters.filter((monster) => {\r\n//       // Canavarlarımızı arama alanından filtreliyoruz\r\n//       return monster.name.toLowerCase().includes(searchField);\r\n//     });\r\n\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <h1 className=\"app-title\">Monsters Rolodex</h1>\r\n//         <SearchBox\r\n//           className=\"search-box\"\r\n//           onChangeHandler={onSearchChange}\r\n//           placeholder={\"search monsters\"}\r\n//         />\r\n//         <CardList monsters={filteredMonsters} />\r\n\r\n//         <button onClick></button>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n//--------------------------------------------------------------------\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C;;AAEA,OAAOC,QAAQ,MAAM,4CAA4C;AAEjE,OAAOC,SAAS,MAAM,8CAA8C;AAEpE,OAAO,WAAW;;AAElB;AAAA;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpDO,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;EACxB;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C;;EAEA,MAAM,CAACW,YAAY,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEnDO,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EAErBP,SAAS,CAAC,MAAM;IACdY,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAAA,CACjDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,KAAK,IAAKP,WAAW,CAACO,KAAK,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA,MAAMC,cAAc,GAAIC,KAAK,IAAK;IAChC,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,EAAE;IAE1DjB,cAAc,CAACc,iBAAiB,CAAC;EACnC,CAAC;;EAED;;EAEA,MAAMI,gBAAgB,GAAGf,QAAQ,CAACgB,MAAM,CAAEC,OAAO,IAAK;IACpD,OAAOA,OAAO,CAACC,IAAI,CAACJ,WAAW,EAAE,CAACK,QAAQ,CAACvB,WAAW,CAAC;EACzD,CAAC,CAAC;;EAEF;;EAEA,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAI,SAAS,EAAC,WAAW;MAAA,UAAC;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAK,eAE/C,QAAC,SAAS;MACR,SAAS,EAAC,YAAY;MACtB,eAAe,EAAEa,cAAe;MAChC,WAAW,EAAE;IAAkB;MAAA;MAAA;MAAA;IAAA,QAC/B,eAEF,QAAC,QAAQ;MAAC,QAAQ,EAAEM;IAAiB;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACpC;AAEV,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA,GArIMpB,GAAG;AAAA,KAAHA,GAAG;AAsIT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}