{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali_d\\\\Documents\\\\GitHub\\\\monsters-rolodex\\\\monsters-rolodex\\\\src\\\\App.js\";\nimport { Component } from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\nimport Card from \"./components/card/card.component\";\n\n//--------------------------------------------------------------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  // bu bir sınıf bileşenidir.\n  //------------------------------------------------------------------------------------------------------------------\n\n  constructor() {\n    // app.js çalıştırıldığında ilk olarak bu method başlatılır,ardından render\n    //inşaatçi // yapıcı metod\n    super();\n    this.onSearchChange = event => {\n      // yaptığım diğer optimizasyon ise , render çağrısı yapıldığında gereksiz yere fazladan anonim fonksiyonlar oluşturmayarak uygulamayı biraz daha performanslı hale getirdim\n      // sınıf bileşenenmiz başlatıldığında yalnızca bir kez çağrılacak ve başlatılacak olan yönteme taşıdım.\n      const searchField = event.target.value.toLowerCase(); //toLowerCase ,tüm diziler üzerinde ,hepsini küçük harfe dönüştüren bir yöntemdir.\n\n      this.setState(() => {\n        return {\n          searchField\n        };\n      });\n    };\n    this.state = {\n      monsters: [],\n      searchField: \"\" //Bu arama alanı metni değişiklik üzerine.\n    };\n  }\n\n  //------------------------------------------------------------------------------------------------------------------\n\n  componentDidMount() {\n    //[yaşam döngüsü yöntemi  = lifecycle method]\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\") //Jsonu alıyorum ,[ fetch = gidip getirmek ]\n    .then(response => response.json()).then(users => this.setState(() => {\n      //setState her çağrıldığında ,render tekrar çağrılır\n      return {\n        monsters: users\n      };\n    }));\n  }\n\n  //------------------------------------------------------------------------------------------------------------------\n\n  //------------------------------------------------------------------------------------------------------------------\n\n  render() {\n    // Render ne gösterileceğini belirler. Kullanıcının arayüzünün ne olacağını belirler.\n    console.log(\"render from appJs\");\n    //------------------------------------------------------------\n    const {\n      monsters,\n      searchField\n    } = this.state; // iki büyük optimizasyon yaptım\n    const {\n      onSearchChange\n    } = this;\n    //------------------------------------------------------------\n\n    const filteredMonsters = monsters.filter(monster => {\n      // Canavarlarımızı arama alanından filtreliyoruz\n      return monster.name.toLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n//--------------------------------------------------------------------\nexport default App;","map":{"version":3,"names":["Component","CardList","SearchBox","Card","App","constructor","onSearchChange","event","searchField","target","value","toLowerCase","setState","state","monsters","componentDidMount","fetch","then","response","json","users","render","console","log","filteredMonsters","filter","monster","name","includes"],"sources":["C:/Users/ali_d/Documents/GitHub/monsters-rolodex/monsters-rolodex/src/App.js"],"sourcesContent":["import { Component } from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\nimport Card from \"./components/card/card.component\";\n\n//--------------------------------------------------------------------\n\nclass App extends Component {\n  // bu bir sınıf bileşenidir.\n  //------------------------------------------------------------------------------------------------------------------\n\n  constructor() {\n    // app.js çalıştırıldığında ilk olarak bu method başlatılır,ardından render\n    //inşaatçi // yapıcı metod\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\", //Bu arama alanı metni değişiklik üzerine.\n    };\n  }\n\n  //------------------------------------------------------------------------------------------------------------------\n\n  componentDidMount() {\n    //[yaşam döngüsü yöntemi  = lifecycle method]\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\") //Jsonu alıyorum ,[ fetch = gidip getirmek ]\n      .then((response) => response.json())\n      .then((users) =>\n        this.setState(() => {\n          //setState her çağrıldığında ,render tekrar çağrılır\n          return { monsters: users };\n        })\n      );\n  }\n\n  //------------------------------------------------------------------------------------------------------------------\n\n  onSearchChange = (event) => {\n    // yaptığım diğer optimizasyon ise , render çağrısı yapıldığında gereksiz yere fazladan anonim fonksiyonlar oluşturmayarak uygulamayı biraz daha performanslı hale getirdim\n    // sınıf bileşenenmiz başlatıldığında yalnızca bir kez çağrılacak ve başlatılacak olan yönteme taşıdım.\n    const searchField = event.target.value.toLowerCase(); //toLowerCase ,tüm diziler üzerinde ,hepsini küçük harfe dönüştüren bir yöntemdir.\n\n    this.setState(() => {\n      return {\n        searchField,\n      };\n    });\n  };\n\n  //------------------------------------------------------------------------------------------------------------------\n\n  render() {\n    // Render ne gösterileceğini belirler. Kullanıcının arayüzünün ne olacağını belirler.\n    console.log(\"render from appJs\");\n    //------------------------------------------------------------\n    const { monsters, searchField } = this.state; // iki büyük optimizasyon yaptım\n    const { onSearchChange } = this;\n    //------------------------------------------------------------\n\n    const filteredMonsters = monsters.filter((monster) => {\n      // Canavarlarımızı arama alanından filtreliyoruz\n      return monster.name.toLowerCase().includes(searchField);\n    });\n\n    return <Card />;\n  }\n}\n\n//--------------------------------------------------------------------\nexport default App;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,QAAQ,MAAM,4CAA4C;AACjE,OAAOC,SAAS,MAAM,8CAA8C;AACpE,OAAO,WAAW;AAClB,OAAOC,IAAI,MAAM,kCAAkC;;AAEnD;AAAA;AAEA,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAC1B;EACA;;EAEAK,WAAW,GAAG;IACZ;IACA;IACA,KAAK,EAAE;IAAC,KAwBVC,cAAc,GAAIC,KAAK,IAAK;MAC1B;MACA;MACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,EAAE,CAAC,CAAC;;MAEtD,IAAI,CAACC,QAAQ,CAAC,MAAM;QAClB,OAAO;UACLJ;QACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IAjCC,IAAI,CAACK,KAAK,GAAG;MACXC,QAAQ,EAAE,EAAE;MACZN,WAAW,EAAE,EAAE,CAAE;IACnB,CAAC;EACH;;EAEA;;EAEAO,iBAAiB,GAAG;IAClB;;IAEAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAAA,CACjDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,KAAK,IACV,IAAI,CAACR,QAAQ,CAAC,MAAM;MAClB;MACA,OAAO;QAAEE,QAAQ,EAAEM;MAAM,CAAC;IAC5B,CAAC,CAAC,CACH;EACL;;EAEA;;EAcA;;EAEAC,MAAM,GAAG;IACP;IACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChC;IACA,MAAM;MAAET,QAAQ;MAAEN;IAAY,CAAC,GAAG,IAAI,CAACK,KAAK,CAAC,CAAC;IAC9C,MAAM;MAAEP;IAAe,CAAC,GAAG,IAAI;IAC/B;;IAEA,MAAMkB,gBAAgB,GAAGV,QAAQ,CAACW,MAAM,CAAEC,OAAO,IAAK;MACpD;MACA,OAAOA,OAAO,CAACC,IAAI,CAAChB,WAAW,EAAE,CAACiB,QAAQ,CAACpB,WAAW,CAAC;IACzD,CAAC,CAAC;IAEF,oBAAO,QAAC,IAAI;MAAA;MAAA;MAAA;IAAA,QAAG;EACjB;AACF;;AAEA;AACA,eAAeJ,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}